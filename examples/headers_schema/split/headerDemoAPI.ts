/**
 * Automatically generated by @grafana/openapi-to-k6: 0.3.2
 * Do not edit manually.
 * Header Demo API
 * An API demonstrating the use of headers in different ways
 * Service version: 1.0.0
 */
import { URL } from 'https://jslib.k6.io/url/1.0.0/index.js'
import http from 'k6/http'
import type { Params, Response } from 'k6/http'
import type {
  GetExampleGet200,
  GetExampleGetHeaders,
  GetExampleResponseHeaders200,
  PostExamplePostBody,
  PostExamplePostHeaders,
} from './headerDemoAPI.schemas'

/**
 * This is the base client to use for interacting with the API.
 */
export class HeaderDemoAPIClient {
  private cleanBaseUrl: string
  private commonRequestParameters: Params

  constructor(clientOptions: {
    baseUrl: string
    commonRequestParameters?: Params
  }) {
    this.cleanBaseUrl = clientOptions.baseUrl.replace(/\/+$/, '')

    this.commonRequestParameters = clientOptions.commonRequestParameters || {}
  }

  /**
   * This GET request demonstrates the use of custom request headers
   * @summary GET request with headers
   */
  getExampleGet(
    headers?: GetExampleGetHeaders,
    requestParameters?: Params
  ): {
    response: Response
    data: GetExampleGet200
  } {
    const k6url = new URL(this.cleanBaseUrl + `/example-get`)
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters
    )
    const response = http.request('GET', k6url.toString(), undefined, {
      ...mergedRequestParameters,
      headers: {
        ...mergedRequestParameters?.headers,
        // In the schema, headers can be of any type like number but k6 accepts only strings as headers, hence converting all headers to string
        ...Object.fromEntries(
          Object.entries(headers || {}).map(([key, value]) => [
            key,
            String(value),
          ])
        ),
      },
    })
    const data = response.json() as GetExampleGet200

    return {
      response,
      data,
    }
  }

  /**
   * This POST request uses a security header for authentication
   * @summary POST request with security headers
   */
  postExamplePost(
    postExamplePostBody: PostExamplePostBody,
    headers: PostExamplePostHeaders,
    requestParameters?: Params
  ): {
    response: Response
  } {
    const k6url = new URL(this.cleanBaseUrl + `/example-post`)
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters
    )
    const response = http.request(
      'POST',
      k6url.toString(),
      JSON.stringify(postExamplePostBody),
      {
        ...mergedRequestParameters,
        headers: {
          ...mergedRequestParameters?.headers,
          'Content-Type': 'application/json',
          // In the schema, headers can be of any type like number but k6 accepts only strings as headers, hence converting all headers to string
          ...Object.fromEntries(
            Object.entries(headers || {}).map(([key, value]) => [
              key,
              String(value),
            ])
          ),
        },
      }
    )

    return {
      response,
    }
  }

  /**
   * This GET request returns custom response headers
   * @summary GET request with response headers only
   */
  getExampleResponseHeaders(requestParameters?: Params): {
    response: Response
    data: GetExampleResponseHeaders200
  } {
    const k6url = new URL(this.cleanBaseUrl + `/example-response-headers`)
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters
    )
    const response = http.request(
      'GET',
      k6url.toString(),
      undefined,
      mergedRequestParameters
    )
    const data = response.json() as GetExampleResponseHeaders200

    return {
      response,
      data,
    }
  }

  /**
   * Merges the provided request parameters with default parameters for the client.
   *
   * @param {Params} requestParameters - The parameters provided specifically for the request
   * @param {Params} commonRequestParameters - Common parameters for all requests
   * @returns {Params} - The merged parameters
   */
  private _mergeRequestParameters(
    requestParameters?: Params,
    commonRequestParameters?: Params
  ): Params {
    return {
      ...commonRequestParameters, // Default to common parameters
      ...requestParameters, // Override with request-specific parameters
      headers: {
        ...(commonRequestParameters?.headers || {}), // Ensure headers are defined
        ...(requestParameters?.headers || {}),
      },
      cookies: {
        ...(commonRequestParameters?.cookies || {}), // Ensure cookies are defined
        ...(requestParameters?.cookies || {}),
      },
      tags: {
        ...(commonRequestParameters?.tags || {}), // Ensure tags are defined
        ...(requestParameters?.tags || {}),
      },
    }
  }
}

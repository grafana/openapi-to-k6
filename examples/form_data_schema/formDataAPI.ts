/**
 * Automatically generated by @grafana/openapi-to-k6: 0.1.0
 * Do not edit manually.
 * Form Data API
 * OpenAPI spec version: 1.0.0
 */
import { FormData } from 'https://jslib.k6.io/formdata/0.0.2/index.js'
import { URL } from 'https://jslib.k6.io/url/1.0.0/index.js'
import http from 'k6/http'
import type { Params, Response, ResponseBody } from 'k6/http'
export type PostUpload400 = {
  error?: string
  success?: boolean
}

export type PostUpload200 = {
  message?: string
  success?: boolean
}

export type PostUploadBody = {
  /** Description of the file */
  description?: string
  /** File to upload */
  file: Blob
  /** User ID associated with the upload */
  userId: string
}

export type CreateFormDataAPIOptions = {
  baseUrl: string
  commonRequestParameters?: Params
}

/**
 * This is the base client to use for interacting with the API.
 */
export const createFormDataAPI = (clientOptions: CreateFormDataAPIOptions) => {
  const cleanBaseUrl = clientOptions.baseUrl.replace(/\/+$/, '')
  /**
   * This endpoint accepts form data and file uploads.
   * @summary Upload files and data
   */
  const postUpload = (
    postUploadBody: PostUploadBody,
    requestParameters?: Params
  ): PostUploadResponse => {
    const formData = new FormData()
    formData.append('file', postUploadBody.file)
    if (postUploadBody.description !== undefined) {
      formData.append('description', postUploadBody.description)
    }
    formData.append('userId', postUploadBody.userId)

    const url = new URL(cleanBaseUrl + `/upload`)
    const mergedRequestParameters = _mergeRequestParameters(
      requestParameters || {},
      clientOptions.commonRequestParameters
    )
    const response = http.request('POST', url.toString(), formData.body(), {
      ...mergedRequestParameters,
      headers: {
        'Content-Type': 'multipart/form-data; boundary=' + formData.boundary,
        ...mergedRequestParameters?.headers,
      },
    })
    let data

    try {
      data = response.json()
    } catch (error) {
      data = response.body
    }
    return {
      response,
      data,
    }
  }

  return { postUpload }
}

export type PostUploadResponse = {
  response: Response
  data: PostUpload200 | ResponseBody
}

/**
 * Merges the provided request parameters with default parameters for the client.
 *
 * @param {Params} requestParameters - The parameters provided specifically for the request
 * @param {Params} commonRequestParameters - Common parameters for all requests
 * @returns {Params} - The merged parameters
 */
const _mergeRequestParameters = (
  requestParameters?: Params,
  commonRequestParameters?: Params
): Params => {
  return {
    ...commonRequestParameters, // Default to common parameters
    ...requestParameters, // Override with request-specific parameters
    headers: {
      ...(commonRequestParameters?.headers || {}), // Ensure headers are defined
      ...(requestParameters?.headers || {}),
    },
    cookies: {
      ...(commonRequestParameters?.cookies || {}), // Ensure cookies are defined
      ...(requestParameters?.cookies || {}),
    },
    tags: {
      ...(commonRequestParameters?.tags || {}), // Ensure tags are defined
      ...(requestParameters?.tags || {}),
    },
  }
}

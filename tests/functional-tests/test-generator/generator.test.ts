import fs from 'fs'
import os from 'os'
import path from 'path'
import {
  afterAll,
  afterEach,
  beforeAll,
  beforeEach,
  describe,
  expect,
  it,
} from 'vitest'
import { Mode } from '../../../src/constants'
import generator from '../../../src/generator'

import {
  loadFixture,
  mkdtemp,
  readFile,
  replaceSpacesAndNewLineToSingleSpace,
  rmdir,
  writeFile,
} from '../helper'

const commonSubstringsForAllSDK = [
  'Automatically generated by',
  'Do not edit manually',
  'Service version',
  'const mergedRequestParameters = this._mergeRequestParameters( requestParameters || {}, this.commonRequestParameters, );',
  'try { data = response.json() as unknown as',
  'catch { data = JSON.parse(response.body as string) as',
  'return { response, data, };',
]

const commonSubstringsForK6SampleScript = [`const baseUrl = "<BASE_URL>";`]

describe('generator', () => {
  let tempDir: string, schemaDirectory: string
  const allFixtures = fs.readdirSync(path.join(__dirname, 'fixtures'))

  beforeAll(async () => {
    tempDir = await mkdtemp(path.join(os.tmpdir(), 'sdk-generator-'))
  })

  afterAll(async () => {
    await rmdir(tempDir, { recursive: true })
  })

  for (const fixtureName of allFixtures) {
    describe(`test ${fixtureName} OpenAPI schema`, () => {
      let openApiPath: string, generatedSchemaPath: string
      const fixture = loadFixture(path.join(__dirname, 'fixtures', fixtureName))

      beforeEach(async () => {
        schemaDirectory = await mkdtemp(
          path.join(tempDir, fixtureName.replace('.', '-'))
        )
        // Write the OpenAPI schema to a file

        openApiPath = path.join(schemaDirectory, 'openapi-schema.json')

        await writeFile(openApiPath, JSON.stringify(fixture['openapi_schema']))

        generatedSchemaPath = path.join(schemaDirectory, 'generated-schema')
      })

      afterEach(async () => {
        await rmdir(schemaDirectory, { recursive: true })
      })

      it(`should generate SDK client from the OpenAPI schema`, async () => {
        const expectedGeneratedCode = fixture['expected_sdk']

        await generator({
          openApiPath,
          outputDir: generatedSchemaPath,
          mode: Mode.SINGLE,
        })

        const generatedFiles = fs.readdirSync(generatedSchemaPath)
        expect(generatedFiles.length).toBe(1)
        expect(generatedFiles[0]).toBeDefined()
        const fileName = path.basename(generatedFiles[0]!)
        expect(fileName).toBe(expectedGeneratedCode.fileName)
        const generatedFilePath = path.join(
          generatedSchemaPath,
          generatedFiles[0]!
        )
        const generatedContent = await readFile(generatedFilePath, 'utf-8')

        for (const expectedString of [
          ...expectedGeneratedCode['expectedSubstrings'],
          ...commonSubstringsForAllSDK,
        ]) {
          expect(
            replaceSpacesAndNewLineToSingleSpace(generatedContent)
          ).toContain(expectedString)
        }
      })

      it('should generate a sample K6 script', async () => {
        await generator({
          openApiPath,
          outputDir: generatedSchemaPath,
          shouldGenerateSampleK6Script: true,
          mode: Mode.SINGLE,
        })

        const generatedFiles = fs.readdirSync(generatedSchemaPath)
        expect(generatedFiles.length).toBe(2)
        const k6ScriptFile = generatedFiles.find((file) =>
          file.includes('k6-script')
        )
        expect(k6ScriptFile).toBeDefined()
        expect(k6ScriptFile).toBe('k6-script.sample.ts')

        const generatedFilePath = path.join(generatedSchemaPath, k6ScriptFile!)
        const generatedContent = await readFile(generatedFilePath, 'utf-8')

        for (const expectedString of [...commonSubstringsForK6SampleScript]) {
          expect(generatedContent).toContain(expectedString)
        }
      })

      it('should not contain types in main file when using split mode', async () => {
        await generator({
          openApiPath,
          outputDir: generatedSchemaPath,
          shouldGenerateSampleK6Script: true,
          mode: Mode.SPLIT,
        })
        const expectedGeneratedCode = fixture['expected_sdk']
        const generatedFiles = fs.readdirSync(generatedSchemaPath)

        expect(generatedFiles.length).toBe(3)

        const clientFile = generatedFiles.find((file) =>
          file.includes(expectedGeneratedCode.fileName)
        )
        const schemaFile = generatedFiles.find((file) =>
          file.includes('.schemas.ts')
        )

        expect(clientFile).toBeDefined()
        expect(schemaFile).toBeDefined()

        const generatedFilePath = path.join(generatedSchemaPath, clientFile!)
        const generatedContent = await readFile(generatedFilePath, 'utf-8')

        expect(generatedContent).not.toContain('export type')
        expect(generatedContent).not.toContain('export interface')
      })
    })
  }
})
